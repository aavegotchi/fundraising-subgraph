// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Batch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Batch entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Batch entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Batch", id.toString(), this);
  }

  static load(id: string): Batch | null {
    return store.get("Batch", id) as Batch | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    return value.toBytes();
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get supply(): BigInt {
    let value = this.get("supply");
    return value.toBigInt();
  }

  set supply(value: BigInt) {
    this.set("supply", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get reserveRatio(): BigInt {
    let value = this.get("reserveRatio");
    return value.toBigInt();
  }

  set reserveRatio(value: BigInt) {
    this.set("reserveRatio", Value.fromBigInt(value));
  }

  get slippage(): BigInt {
    let value = this.get("slippage");
    return value.toBigInt();
  }

  set slippage(value: BigInt) {
    this.set("slippage", Value.fromBigInt(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Order entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Order entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Order", id.toString(), this);
  }

  static load(id: string): Order | null {
    return store.get("Order", id) as Order | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txnId(): Bytes {
    let value = this.get("txnId");
    return value.toBytes();
  }

  set txnId(value: Bytes) {
    this.set("txnId", Value.fromBytes(value));
  }

  get claimId(): Bytes | null {
    let value = this.get("claimId");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set claimId(value: Bytes | null) {
    if (value === null) {
      this.unset("claimId");
    } else {
      this.set("claimId", Value.fromBytes(value as Bytes));
    }
  }

  get batchId(): string {
    let value = this.get("batchId");
    return value.toString();
  }

  set batchId(value: string) {
    this.set("batchId", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    return value.toBytes();
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get reserveRatio(): BigInt {
    let value = this.get("reserveRatio");
    return value.toBigInt();
  }

  set reserveRatio(value: BigInt) {
    this.set("reserveRatio", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get ghst(): BigInt | null {
    let value = this.get("ghst");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ghst(value: BigInt | null) {
    if (value === null) {
      this.unset("ghst");
    } else {
      this.set("ghst", Value.fromBigInt(value as BigInt));
    }
  }

  get dai(): BigInt | null {
    let value = this.get("dai");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dai(value: BigInt | null) {
    if (value === null) {
      this.unset("dai");
    } else {
      this.set("dai", Value.fromBigInt(value as BigInt));
    }
  }
}
