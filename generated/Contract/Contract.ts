// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class UpdateBeneficiary extends EthereumEvent {
  get params(): UpdateBeneficiary__Params {
    return new UpdateBeneficiary__Params(this);
  }
}

export class UpdateBeneficiary__Params {
  _event: UpdateBeneficiary;

  constructor(event: UpdateBeneficiary) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateFormula extends EthereumEvent {
  get params(): UpdateFormula__Params {
    return new UpdateFormula__Params(this);
  }
}

export class UpdateFormula__Params {
  _event: UpdateFormula;

  constructor(event: UpdateFormula) {
    this._event = event;
  }

  get formula(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateFees extends EthereumEvent {
  get params(): UpdateFees__Params {
    return new UpdateFees__Params(this);
  }
}

export class UpdateFees__Params {
  _event: UpdateFees;

  constructor(event: UpdateFees) {
    this._event = event;
  }

  get buyFeePct(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sellFeePct(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewMetaBatch extends EthereumEvent {
  get params(): NewMetaBatch__Params {
    return new NewMetaBatch__Params(this);
  }
}

export class NewMetaBatch__Params {
  _event: NewMetaBatch;

  constructor(event: NewMetaBatch) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyFeePct(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sellFeePct(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get formula(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class NewBatch extends EthereumEvent {
  get params(): NewBatch__Params {
    return new NewBatch__Params(this);
  }
}

export class NewBatch__Params {
  _event: NewBatch;

  constructor(event: NewBatch) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get supply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get balance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reserveRatio(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get slippage(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CancelBatch extends EthereumEvent {
  get params(): CancelBatch__Params {
    return new CancelBatch__Params(this);
  }
}

export class CancelBatch__Params {
  _event: CancelBatch;

  constructor(event: CancelBatch) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AddCollateralToken extends EthereumEvent {
  get params(): AddCollateralToken__Params {
    return new AddCollateralToken__Params(this);
  }
}

export class AddCollateralToken__Params {
  _event: AddCollateralToken;

  constructor(event: AddCollateralToken) {
    this._event = event;
  }

  get collateral(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get virtualSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get virtualBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reserveRatio(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get slippage(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RemoveCollateralToken extends EthereumEvent {
  get params(): RemoveCollateralToken__Params {
    return new RemoveCollateralToken__Params(this);
  }
}

export class RemoveCollateralToken__Params {
  _event: RemoveCollateralToken;

  constructor(event: RemoveCollateralToken) {
    this._event = event;
  }

  get collateral(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateCollateralToken extends EthereumEvent {
  get params(): UpdateCollateralToken__Params {
    return new UpdateCollateralToken__Params(this);
  }
}

export class UpdateCollateralToken__Params {
  _event: UpdateCollateralToken;

  constructor(event: UpdateCollateralToken) {
    this._event = event;
  }

  get collateral(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get virtualSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get virtualBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get reserveRatio(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get slippage(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Open extends EthereumEvent {
  get params(): Open__Params {
    return new Open__Params(this);
  }
}

export class Open__Params {
  _event: Open;

  constructor(event: Open) {
    this._event = event;
  }
}

export class OpenBuyOrder extends EthereumEvent {
  get params(): OpenBuyOrder__Params {
    return new OpenBuyOrder__Params(this);
  }
}

export class OpenBuyOrder__Params {
  _event: OpenBuyOrder;

  constructor(event: OpenBuyOrder) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get batchId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OpenSellOrder extends EthereumEvent {
  get params(): OpenSellOrder__Params {
    return new OpenSellOrder__Params(this);
  }
}

export class OpenSellOrder__Params {
  _event: OpenSellOrder;

  constructor(event: OpenSellOrder) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get batchId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimBuyOrder extends EthereumEvent {
  get params(): ClaimBuyOrder__Params {
    return new ClaimBuyOrder__Params(this);
  }
}

export class ClaimBuyOrder__Params {
  _event: ClaimBuyOrder;

  constructor(event: ClaimBuyOrder) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get batchId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimSellOrder extends EthereumEvent {
  get params(): ClaimSellOrder__Params {
    return new ClaimSellOrder__Params(this);
  }
}

export class ClaimSellOrder__Params {
  _event: ClaimSellOrder;

  constructor(event: ClaimSellOrder) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get batchId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ClaimCancelledBuyOrder extends EthereumEvent {
  get params(): ClaimCancelledBuyOrder__Params {
    return new ClaimCancelledBuyOrder__Params(this);
  }
}

export class ClaimCancelledBuyOrder__Params {
  _event: ClaimCancelledBuyOrder;

  constructor(event: ClaimCancelledBuyOrder) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get batchId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ClaimCancelledSellOrder extends EthereumEvent {
  get params(): ClaimCancelledSellOrder__Params {
    return new ClaimCancelledSellOrder__Params(this);
  }
}

export class ClaimCancelledSellOrder__Params {
  _event: ClaimCancelledSellOrder;

  constructor(event: ClaimCancelledSellOrder) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get batchId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdatePricing extends EthereumEvent {
  get params(): UpdatePricing__Params {
    return new UpdatePricing__Params(this);
  }
}

export class UpdatePricing__Params {
  _event: UpdatePricing;

  constructor(event: UpdatePricing) {
    this._event = event;
  }

  get batchId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalBuySpend(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalBuyReturn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalSellSpend(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalSellReturn(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ScriptResult extends EthereumEvent {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends EthereumEvent {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__metaBatchesResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromAddress(this.value4));
    return map;
  }
}

export class Contract__collateralsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Contract__getCollateralTokenResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Contract__getBatchResult {
  value0: boolean;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    map.set("value8", EthereumValue.fromUnsignedBigInt(this.value8));
    map.set("value9", EthereumValue.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): CallResult<boolean> {
    let result = super.tryCall("hasInitialized", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  PPM(): BigInt {
    let result = super.call("PPM", []);

    return result[0].toBigInt();
  }

  try_PPM(): CallResult<BigInt> {
    let result = super.tryCall("PPM", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  UPDATE_FORMULA_ROLE(): Bytes {
    let result = super.call("UPDATE_FORMULA_ROLE", []);

    return result[0].toBytes();
  }

  try_UPDATE_FORMULA_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("UPDATE_FORMULA_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  metaBatches(param0: BigInt): Contract__metaBatchesResult {
    let result = super.call("metaBatches", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return new Contract__metaBatchesResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_metaBatches(param0: BigInt): CallResult<Contract__metaBatchesResult> {
    let result = super.tryCall("metaBatches", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__metaBatchesResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call("getEVMScriptExecutor", [
      EthereumValue.fromBytes(_script)
    ]);

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): CallResult<Address> {
    let result = super.tryCall("getEVMScriptExecutor", [
      EthereumValue.fromBytes(_script)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  tokenManager(): Address {
    let result = super.call("tokenManager", []);

    return result[0].toAddress();
  }

  try_tokenManager(): CallResult<Address> {
    let result = super.tryCall("tokenManager", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  OPEN_BUY_ORDER_ROLE(): Bytes {
    let result = super.call("OPEN_BUY_ORDER_ROLE", []);

    return result[0].toBytes();
  }

  try_OPEN_BUY_ORDER_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("OPEN_BUY_ORDER_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  UPDATE_COLLATERAL_TOKEN_ROLE(): Bytes {
    let result = super.call("UPDATE_COLLATERAL_TOKEN_ROLE", []);

    return result[0].toBytes();
  }

  try_UPDATE_COLLATERAL_TOKEN_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("UPDATE_COLLATERAL_TOKEN_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getRecoveryVault(): Address {
    let result = super.call("getRecoveryVault", []);

    return result[0].toAddress();
  }

  try_getRecoveryVault(): CallResult<Address> {
    let result = super.tryCall("getRecoveryVault", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  beneficiary(): Address {
    let result = super.call("beneficiary", []);

    return result[0].toAddress();
  }

  try_beneficiary(): CallResult<Address> {
    let result = super.tryCall("beneficiary", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  UPDATE_BENEFICIARY_ROLE(): Bytes {
    let result = super.call("UPDATE_BENEFICIARY_ROLE", []);

    return result[0].toBytes();
  }

  try_UPDATE_BENEFICIARY_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("UPDATE_BENEFICIARY_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  isOpen(): boolean {
    let result = super.call("isOpen", []);

    return result[0].toBoolean();
  }

  try_isOpen(): CallResult<boolean> {
    let result = super.tryCall("isOpen", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  collateralsToBeClaimed(param0: Address): BigInt {
    let result = super.call("collateralsToBeClaimed", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_collateralsToBeClaimed(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("collateralsToBeClaimed", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  formula(): Address {
    let result = super.call("formula", []);

    return result[0].toAddress();
  }

  try_formula(): CallResult<Address> {
    let result = super.tryCall("formula", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  ADD_COLLATERAL_TOKEN_ROLE(): Bytes {
    let result = super.call("ADD_COLLATERAL_TOKEN_ROLE", []);

    return result[0].toBytes();
  }

  try_ADD_COLLATERAL_TOKEN_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("ADD_COLLATERAL_TOKEN_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  UPDATE_FEES_ROLE(): Bytes {
    let result = super.call("UPDATE_FEES_ROLE", []);

    return result[0].toBytes();
  }

  try_UPDATE_FEES_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("UPDATE_FEES_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  OPEN_ROLE(): Bytes {
    let result = super.call("OPEN_ROLE", []);

    return result[0].toBytes();
  }

  try_OPEN_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("OPEN_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  sellFeePct(): BigInt {
    let result = super.call("sellFeePct", []);

    return result[0].toBigInt();
  }

  try_sellFeePct(): CallResult<BigInt> {
    let result = super.tryCall("sellFeePct", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  allowRecoverability(token: Address): boolean {
    let result = super.call("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_allowRecoverability(token: Address): CallResult<boolean> {
    let result = super.tryCall("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  appId(): Bytes {
    let result = super.call("appId", []);

    return result[0].toBytes();
  }

  try_appId(): CallResult<Bytes> {
    let result = super.tryCall("appId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getInitializationBlock(): BigInt {
    let result = super.call("getInitializationBlock", []);

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): CallResult<BigInt> {
    let result = super.tryCall("getInitializationBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tokensToBeMinted(): BigInt {
    let result = super.call("tokensToBeMinted", []);

    return result[0].toBigInt();
  }

  try_tokensToBeMinted(): CallResult<BigInt> {
    let result = super.tryCall("tokensToBeMinted", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  canPerform(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call("canPerform", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigIntArray(_params)
    ]);

    return result[0].toBoolean();
  }

  try_canPerform(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): CallResult<boolean> {
    let result = super.tryCall("canPerform", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigIntArray(_params)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call("getEVMScriptRegistry", []);

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): CallResult<Address> {
    let result = super.tryCall("getEVMScriptRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  REMOVE_COLLATERAL_TOKEN_ROLE(): Bytes {
    let result = super.call("REMOVE_COLLATERAL_TOKEN_ROLE", []);

    return result[0].toBytes();
  }

  try_REMOVE_COLLATERAL_TOKEN_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("REMOVE_COLLATERAL_TOKEN_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  batchBlocks(): BigInt {
    let result = super.call("batchBlocks", []);

    return result[0].toBigInt();
  }

  try_batchBlocks(): CallResult<BigInt> {
    let result = super.tryCall("batchBlocks", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  reserve(): Address {
    let result = super.call("reserve", []);

    return result[0].toAddress();
  }

  try_reserve(): CallResult<Address> {
    let result = super.tryCall("reserve", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  OPEN_SELL_ORDER_ROLE(): Bytes {
    let result = super.call("OPEN_SELL_ORDER_ROLE", []);

    return result[0].toBytes();
  }

  try_OPEN_SELL_ORDER_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("OPEN_SELL_ORDER_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  kernel(): Address {
    let result = super.call("kernel", []);

    return result[0].toAddress();
  }

  try_kernel(): CallResult<Address> {
    let result = super.tryCall("kernel", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): CallResult<boolean> {
    let result = super.tryCall("isPetrified", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  collaterals(param0: Address): Contract__collateralsResult {
    let result = super.call("collaterals", [EthereumValue.fromAddress(param0)]);

    return new Contract__collateralsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_collaterals(param0: Address): CallResult<Contract__collateralsResult> {
    let result = super.tryCall("collaterals", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__collateralsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  controller(): Address {
    let result = super.call("controller", []);

    return result[0].toAddress();
  }

  try_controller(): CallResult<Address> {
    let result = super.tryCall("controller", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  buyFeePct(): BigInt {
    let result = super.call("buyFeePct", []);

    return result[0].toBigInt();
  }

  try_buyFeePct(): CallResult<BigInt> {
    let result = super.tryCall("buyFeePct", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  PCT_BASE(): BigInt {
    let result = super.call("PCT_BASE", []);

    return result[0].toBigInt();
  }

  try_PCT_BASE(): CallResult<BigInt> {
    let result = super.tryCall("PCT_BASE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentBatchId(): BigInt {
    let result = super.call("getCurrentBatchId", []);

    return result[0].toBigInt();
  }

  try_getCurrentBatchId(): CallResult<BigInt> {
    let result = super.tryCall("getCurrentBatchId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralToken(_collateral: Address): Contract__getCollateralTokenResult {
    let result = super.call("getCollateralToken", [
      EthereumValue.fromAddress(_collateral)
    ]);

    return new Contract__getCollateralTokenResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getCollateralToken(
    _collateral: Address
  ): CallResult<Contract__getCollateralTokenResult> {
    let result = super.tryCall("getCollateralToken", [
      EthereumValue.fromAddress(_collateral)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__getCollateralTokenResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getBatch(_batchId: BigInt, _collateral: Address): Contract__getBatchResult {
    let result = super.call("getBatch", [
      EthereumValue.fromUnsignedBigInt(_batchId),
      EthereumValue.fromAddress(_collateral)
    ]);

    return new Contract__getBatchResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_getBatch(
    _batchId: BigInt,
    _collateral: Address
  ): CallResult<Contract__getBatchResult> {
    let result = super.tryCall("getBatch", [
      EthereumValue.fromUnsignedBigInt(_batchId),
      EthereumValue.fromAddress(_collateral)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__getBatchResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  getStaticPricePPM(
    _supply: BigInt,
    _balance: BigInt,
    _reserveRatio: BigInt
  ): BigInt {
    let result = super.call("getStaticPricePPM", [
      EthereumValue.fromUnsignedBigInt(_supply),
      EthereumValue.fromUnsignedBigInt(_balance),
      EthereumValue.fromUnsignedBigInt(_reserveRatio)
    ]);

    return result[0].toBigInt();
  }

  try_getStaticPricePPM(
    _supply: BigInt,
    _balance: BigInt,
    _reserveRatio: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getStaticPricePPM", [
      EthereumValue.fromUnsignedBigInt(_supply),
      EthereumValue.fromUnsignedBigInt(_balance),
      EthereumValue.fromUnsignedBigInt(_reserveRatio)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }
}

export class TransferToVaultCall extends EthereumCall {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _formula(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _reserve(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _batchBlocks(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _buyFeePct(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _sellFeePct(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OpenCall extends EthereumCall {
  get inputs(): OpenCall__Inputs {
    return new OpenCall__Inputs(this);
  }

  get outputs(): OpenCall__Outputs {
    return new OpenCall__Outputs(this);
  }
}

export class OpenCall__Inputs {
  _call: OpenCall;

  constructor(call: OpenCall) {
    this._call = call;
  }
}

export class OpenCall__Outputs {
  _call: OpenCall;

  constructor(call: OpenCall) {
    this._call = call;
  }
}

export class UpdateFormulaCall extends EthereumCall {
  get inputs(): UpdateFormulaCall__Inputs {
    return new UpdateFormulaCall__Inputs(this);
  }

  get outputs(): UpdateFormulaCall__Outputs {
    return new UpdateFormulaCall__Outputs(this);
  }
}

export class UpdateFormulaCall__Inputs {
  _call: UpdateFormulaCall;

  constructor(call: UpdateFormulaCall) {
    this._call = call;
  }

  get _formula(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFormulaCall__Outputs {
  _call: UpdateFormulaCall;

  constructor(call: UpdateFormulaCall) {
    this._call = call;
  }
}

export class UpdateBeneficiaryCall extends EthereumCall {
  get inputs(): UpdateBeneficiaryCall__Inputs {
    return new UpdateBeneficiaryCall__Inputs(this);
  }

  get outputs(): UpdateBeneficiaryCall__Outputs {
    return new UpdateBeneficiaryCall__Outputs(this);
  }
}

export class UpdateBeneficiaryCall__Inputs {
  _call: UpdateBeneficiaryCall;

  constructor(call: UpdateBeneficiaryCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateBeneficiaryCall__Outputs {
  _call: UpdateBeneficiaryCall;

  constructor(call: UpdateBeneficiaryCall) {
    this._call = call;
  }
}

export class UpdateFeesCall extends EthereumCall {
  get inputs(): UpdateFeesCall__Inputs {
    return new UpdateFeesCall__Inputs(this);
  }

  get outputs(): UpdateFeesCall__Outputs {
    return new UpdateFeesCall__Outputs(this);
  }
}

export class UpdateFeesCall__Inputs {
  _call: UpdateFeesCall;

  constructor(call: UpdateFeesCall) {
    this._call = call;
  }

  get _buyFeePct(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sellFeePct(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateFeesCall__Outputs {
  _call: UpdateFeesCall;

  constructor(call: UpdateFeesCall) {
    this._call = call;
  }
}

export class AddCollateralTokenCall extends EthereumCall {
  get inputs(): AddCollateralTokenCall__Inputs {
    return new AddCollateralTokenCall__Inputs(this);
  }

  get outputs(): AddCollateralTokenCall__Outputs {
    return new AddCollateralTokenCall__Outputs(this);
  }
}

export class AddCollateralTokenCall__Inputs {
  _call: AddCollateralTokenCall;

  constructor(call: AddCollateralTokenCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _virtualSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _virtualBalance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _reserveRatio(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _slippage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddCollateralTokenCall__Outputs {
  _call: AddCollateralTokenCall;

  constructor(call: AddCollateralTokenCall) {
    this._call = call;
  }
}

export class RemoveCollateralTokenCall extends EthereumCall {
  get inputs(): RemoveCollateralTokenCall__Inputs {
    return new RemoveCollateralTokenCall__Inputs(this);
  }

  get outputs(): RemoveCollateralTokenCall__Outputs {
    return new RemoveCollateralTokenCall__Outputs(this);
  }
}

export class RemoveCollateralTokenCall__Inputs {
  _call: RemoveCollateralTokenCall;

  constructor(call: RemoveCollateralTokenCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveCollateralTokenCall__Outputs {
  _call: RemoveCollateralTokenCall;

  constructor(call: RemoveCollateralTokenCall) {
    this._call = call;
  }
}

export class UpdateCollateralTokenCall extends EthereumCall {
  get inputs(): UpdateCollateralTokenCall__Inputs {
    return new UpdateCollateralTokenCall__Inputs(this);
  }

  get outputs(): UpdateCollateralTokenCall__Outputs {
    return new UpdateCollateralTokenCall__Outputs(this);
  }
}

export class UpdateCollateralTokenCall__Inputs {
  _call: UpdateCollateralTokenCall;

  constructor(call: UpdateCollateralTokenCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _virtualSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _virtualBalance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _reserveRatio(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _slippage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateCollateralTokenCall__Outputs {
  _call: UpdateCollateralTokenCall;

  constructor(call: UpdateCollateralTokenCall) {
    this._call = call;
  }
}

export class OpenBuyOrderCall extends EthereumCall {
  get inputs(): OpenBuyOrderCall__Inputs {
    return new OpenBuyOrderCall__Inputs(this);
  }

  get outputs(): OpenBuyOrderCall__Outputs {
    return new OpenBuyOrderCall__Outputs(this);
  }
}

export class OpenBuyOrderCall__Inputs {
  _call: OpenBuyOrderCall;

  constructor(call: OpenBuyOrderCall) {
    this._call = call;
  }

  get _buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OpenBuyOrderCall__Outputs {
  _call: OpenBuyOrderCall;

  constructor(call: OpenBuyOrderCall) {
    this._call = call;
  }
}

export class OpenSellOrderCall extends EthereumCall {
  get inputs(): OpenSellOrderCall__Inputs {
    return new OpenSellOrderCall__Inputs(this);
  }

  get outputs(): OpenSellOrderCall__Outputs {
    return new OpenSellOrderCall__Outputs(this);
  }
}

export class OpenSellOrderCall__Inputs {
  _call: OpenSellOrderCall;

  constructor(call: OpenSellOrderCall) {
    this._call = call;
  }

  get _seller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OpenSellOrderCall__Outputs {
  _call: OpenSellOrderCall;

  constructor(call: OpenSellOrderCall) {
    this._call = call;
  }
}

export class ClaimBuyOrderCall extends EthereumCall {
  get inputs(): ClaimBuyOrderCall__Inputs {
    return new ClaimBuyOrderCall__Inputs(this);
  }

  get outputs(): ClaimBuyOrderCall__Outputs {
    return new ClaimBuyOrderCall__Outputs(this);
  }
}

export class ClaimBuyOrderCall__Inputs {
  _call: ClaimBuyOrderCall;

  constructor(call: ClaimBuyOrderCall) {
    this._call = call;
  }

  get _buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _batchId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimBuyOrderCall__Outputs {
  _call: ClaimBuyOrderCall;

  constructor(call: ClaimBuyOrderCall) {
    this._call = call;
  }
}

export class ClaimSellOrderCall extends EthereumCall {
  get inputs(): ClaimSellOrderCall__Inputs {
    return new ClaimSellOrderCall__Inputs(this);
  }

  get outputs(): ClaimSellOrderCall__Outputs {
    return new ClaimSellOrderCall__Outputs(this);
  }
}

export class ClaimSellOrderCall__Inputs {
  _call: ClaimSellOrderCall;

  constructor(call: ClaimSellOrderCall) {
    this._call = call;
  }

  get _seller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _batchId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimSellOrderCall__Outputs {
  _call: ClaimSellOrderCall;

  constructor(call: ClaimSellOrderCall) {
    this._call = call;
  }
}

export class ClaimCancelledBuyOrderCall extends EthereumCall {
  get inputs(): ClaimCancelledBuyOrderCall__Inputs {
    return new ClaimCancelledBuyOrderCall__Inputs(this);
  }

  get outputs(): ClaimCancelledBuyOrderCall__Outputs {
    return new ClaimCancelledBuyOrderCall__Outputs(this);
  }
}

export class ClaimCancelledBuyOrderCall__Inputs {
  _call: ClaimCancelledBuyOrderCall;

  constructor(call: ClaimCancelledBuyOrderCall) {
    this._call = call;
  }

  get _buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _batchId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimCancelledBuyOrderCall__Outputs {
  _call: ClaimCancelledBuyOrderCall;

  constructor(call: ClaimCancelledBuyOrderCall) {
    this._call = call;
  }
}

export class ClaimCancelledSellOrderCall extends EthereumCall {
  get inputs(): ClaimCancelledSellOrderCall__Inputs {
    return new ClaimCancelledSellOrderCall__Inputs(this);
  }

  get outputs(): ClaimCancelledSellOrderCall__Outputs {
    return new ClaimCancelledSellOrderCall__Outputs(this);
  }
}

export class ClaimCancelledSellOrderCall__Inputs {
  _call: ClaimCancelledSellOrderCall;

  constructor(call: ClaimCancelledSellOrderCall) {
    this._call = call;
  }

  get _seller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _batchId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ClaimCancelledSellOrderCall__Outputs {
  _call: ClaimCancelledSellOrderCall;

  constructor(call: ClaimCancelledSellOrderCall) {
    this._call = call;
  }
}
